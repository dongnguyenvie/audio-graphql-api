input InputRemoveUser {
  id: String!
}

input InputCreateUser {
  username: String!
  fullName: String!
  avatar: String!
  email: String!
  phone: String
  password: String!
  roles: [String]!
}

input InputUpdateUser {
  username: String!
  fullName: String!
  avatar: String!
  email: String!
  phone: String
  password: String!
  roles: [String]!
}

input InputChangePassword {
  id: String! @validate(condition: [{ key: "isEmpty" }])
  oldPass: String! @validate(schema: "user", condition: [{ key: "isEmpty" }])
  newPass: String! @validate(schema: "user", condition: [{ key: "isEmpty" }])
  confirmPass: String! @validate(schema: "user", condition: [{ key: "isEmpty" }])
}

input InputUserQuery {
  id: String!
}

type UserPaginate {
  docs: [User]
  totalDocs: Int
  limit: Int
  hasPrevPage: Boolean
  hasNextPage: Boolean
  page: Int
  totalPages: Int
  offset: Int
  prevPage: Int
  nextPage: Int
  pagingCounter: Int
  meta: JSON
}

type User {
  id: ID
  username: String!
  fullName: String
  avatar: String
  email: String
  phone: String
  roles: [Role]
  createdAt: DateTime!
  updatedAt: DateTime!
}

type ParseToken {
  id: ID
  iat: String
  exp: String
}

type UserResponse {
  success: Boolean!
  message: String
  result: User
}

type UsersResponse {
  success: Boolean!
  message: String
  result: [User]
}

extend type Query {
  getUsers(filters: InputPagingRequest): UserPaginate
  getUser(user: InputUserQuery!): UserResponse
}

extend type Mutation {
  createUser(user: InputCreateUser): UserResponse!
  updateUser(user: InputUpdateUser!): UserResponse!
  deleteUser(user: InputRemoveUser): UserResponse
  changePassword(user: InputChangePassword): UserResponse!
}
