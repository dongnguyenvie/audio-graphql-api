type Role {
  id: ID
  name: String!
  description: String
  permission: String!
  createdAt: DateTime
  updatedAt: DateTime
}

input InputCreateRole {
  name: String!
  description: String!
  permission: String!
}

input InputRoleQuery {
  id: ID!
}

input InputUpdateRole {
  id: ID!
  name: String
  description: String
  permission: String
}

input InputDeleteRole {
  id: ID!
}

type RolePaginate {
  docs: [Role]
  totalDocs: Int
  limit: Int
  hasPrevPage: Boolean
  hasNextPage: Boolean
  page: Int
  totalPages: Int
  offset: Int
  prevPage: Int
  nextPage: Int
  pagingCounter: Int
  meta: JSON
}

type RoleResponse {
  success: Boolean!
  message: String
  result: Role
}

type RolesResponse {
  success: Boolean!
  message: String
  result: [Role]
}

extend type Query {
  getRole(role: InputRoleQuery!): RoleResponse
  getRoles(filters: InputPagingRequest): RolePaginate
}

extend type Mutation {
  createRole(role: InputCreateRole!): RoleResponse!
  updateRole(role: InputUpdateRole!): RoleResponse! @auth(role: ADMIN)
  deleteRole(role: InputDeleteRole!): RoleResponse! @auth(role: ADMIN)
}
